name: Terraform EC2 Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose Terraform action"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy
      aws_region:
        description: "Choose AWS region"
        required: true
        default: "eu-west-2"
        type: choice
        options:
          - eu-west-2
          - us-east-1
          - ap-south-1

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ github.event.inputs.aws_region }}
      ACTION: ${{ github.event.inputs.action }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply/Destroy
        run: |
          if [ "${ACTION}" = "apply" ]; then
            terraform apply -auto-approve -var="region=${AWS_REGION}"
          else
            terraform destroy -auto-approve -var="region=${AWS_REGION}"
          fi

      - name: Get EC2 Public IP via AWS CLI
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          EC2_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=my-ec2" "Name=instance-state-name,Values=running" \
            --region ${AWS_REGION} \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "ec2_ip=$EC2_IP" >> $GITHUB_ENV
          echo "EC2 Public IP: $EC2_IP"

      - name: Configure SSH key
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

            - name: Wait for SSH to be ready
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "Waiting for EC2 SSH to be ready..."
          for i in {1..30}; do
            if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.ec2_ip }} "echo ok" >/dev/null 2>&1; then
              echo "✅ SSH is ready!"
              exit 0
            else
              echo "Attempt $i: SSH not ready yet, retrying in 10s..."
              sleep 10
            fi
          done
          echo "❌ SSH did not become ready in time."
          exit 1

      - name: Install Apache and Deploy HTML
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.ec2_ip }} << 'EOF'
            set -e
            sudo apt-get update -y
            sudo apt-get install -y apache2 wget unzip
            sudo systemctl enable apache2
            sudo systemctl start apache2

            cd /var/www/html
            sudo rm -rf *
            wget https://templatemo.com/tm-zip-files-2020/templatemo_596_electric_xtra.zip -O site.zip
            unzip site.zip
            sudo mv templatemo_596_electric_xtra/* .
            rm -rf templatemo_596_electric_xtra site.zip
          EOF
